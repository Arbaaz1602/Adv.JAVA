day 5 Advanced java
JSP continued:----------
Implicit objects: Objects which are created implicitely by the container
request---->javax.servlet.http.HttpServeltRequest used to handle request specific parameters
response---->javax.servlet.http.HttpServeltResponse used to handle response
out----> javax.servlet.jsp.JspWriter used to generate response through scriplet
session-----> javax.servlet.http.HttpSession used to handle information at object level
config------> javax.servlet.ServletConfig
application------------>javax.servlet.ServletContext used to handle application level information
page------->Referance to an obect of jsp specific servlet implementation class generated by the container
pageContext----->javax.servlet.jsp.PageContext used as a SPOC used to obtain resources  
exception-------->java.lang.throwable used to handle exception occurred during execution
				  Available only when isErrorPage attribute of page directive is set to true
				  
				  
Standard Actions:
used to perform specific task
All JSP standard actions follow a standard format:
<prefix:suffix>
suffix is actual name of the tag

1/<jsp:useBean>
Used to instantiate a java bean;
<jsp:useBean class="customer" id=C1">
Attributes:
-id(mandatory)---->specifies identity for the bean
-class(mandatory)---->specifies full qualified name(with package) of the bean class
-type(optional)------>specifies the static type for that bean
-scope(optional)------>specifies the scope of the bean
					  possible values---->page (default)
					  					  request
					  					  session
					  					  application

2.<jsp:setProperty property="" name="">
used to set properties of the bean
syntax:
<jsp:setPrperty name="BeanName"...........<Property-Details>.../>
<jsp:SetPropert name="C1" >

property details for <jsp:setProperty>
1.property = "*" sets all properties
2.property = "<<prop-name>>"-->sets property for specific property

For both the options mentioned above, the request parameter names must match the property names of the target bean class.
3.If the names mismatch a mapping is necessary this is done using 'param' attribute
eg: <jsp:setProperty name="m1" property="movieNo" param="txt_movieNo"/>

4.It is also possible to assign a value directly, This is done using value attribute
eg: <jsp:stProperty name="m1" property="year" value="1990"/>

This value can also be assigned using a jsp expression
eg:

<%
int yearOfRelease = 1987;
%>
<jsp:stProperty name="m1" property="year" value=<%=yearOfRelease%>/>

3.<jsp:getPropert property=" " name="">

<jsp:forward>------>used to forward the request to another page
eg.<jsp:forward page="next.jsp"/>

<jsp:include>-------->will include the response from target page
<jsp:include page="next.jsp"/>

<jsp:param>------->usedin conjunction with forward or include to supply additional parameters

	<jsp:forward page="next.jsp"> 
	 	<jsp:param name="" value=""/>
 	</jsp:forward>


--------------------------<%@include%>----------VS-----------------<jsp:include........./>-----------------------
Attribute name:'file'									Attribute name:'page'
Includes the resource at translation time				Include the resource at request time

---YOU CANNOT CALL A METHOD DEFINED IN A CLASS FROM JSP Expresions----- 
CUSTOM TAGS:
Sometimes as per the application requirement it is necessary to create tags. these are known as custom tags.
Need:
<jsp:useBean> is capable of working on values only
To handle the processing developer has to write a java code inside scriplet.
benefits:
Used to reduce the number of scriplets in jsp
Reusability
can be used to handle bean processing
To create a custom tag developer has to provide the implementation of tag using java class that is known as 
Tag handler class.

Custom tag:
tag handler class is to be created using a Tag API from (javax.servlet.jsp.tagext)
includes the following:
Tag(I)
TagSupport(C)

The class and the tag can be mapped using a TLD(Tag library Descriptor) file.
This is a mapping file that contains entries in the xml format.

---------------------------------------------------------
Hibernate  (framework)
Hibernate is an open source java based framework that is used to build a persistence layer of an application.

framework-partial solution to address common problems
partial solution- already implemented code

Persistence Layer:
				Presentation layer
					|
				Business Layer
					|
				Persistence layer
					|
				DataBase

Hibernate is a framework that is based upon ORM principles
It is distributed into a single zip file which contains saveral JAR file
ORM Object to Relational Mapping
 
ORM principles:
1.Automated Persistence
Handling CRUD operation without writing Sql queries
Even without writing JDBC code
2.Full Support for Object Modeling:
Composition, Inheritance and Polymorphism
3.Full Support for transaction management and performance optimization
4.Provides full support for quering that works with classes and their properties rather than tables and their columns
5.Works on the top of JDBC API.

Architecture of Hibernate
Application Classes---------->(Hibernate)------------>Database

Core Architecture*
					JDBC                                          Hibernate
				Connection										   Session
				DriverMAnager									SessionFActory
				
Hibernate API:-------->belong to org.hibernate package
-Configuration(C)
org.hibernate.cfg.Configuration
-session(I)
org.hibernate.Session
An object representing a conversation between the application and the persistent store
-sessionFactory(I)
A factory for session and a client of ConnectionProvider
-Transcation(I)
-Query(I)






















				  